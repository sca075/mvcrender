name: Wheels (build + musllinux) and Publish

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:
  release:
    types: [ published ]

permissions:
  contents: write  # Required for uploading release assets
  id-token: write  # Required for PyPI trusted publishing (optional)

jobs:
  wheels-linux:
    name: Build wheels (Linux ${{ matrix.arch }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable QEMU (for aarch64 emulation)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: "cp313-*"
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          # Use faster manylinux_2_17 instead of manylinux_2_28
          CIBW_MANYLINUX_X86_64: manylinux_2_17
          CIBW_MANYLINUX_AARCH64: manylinux_2_17
          CIBW_MUSLLINUX_X86_64: musllinux_1_2
          CIBW_MUSLLINUX_AARCH64: musllinux_1_2
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686 *-musllinux_i686"
          # Skip testing to speed up builds - we test in sdist job
          CIBW_TEST_SKIP: "*"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.arch }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels-macos:
    name: Build wheels (macOS ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runner: macos-13
          - arch: arm64
            runner: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: "cp313-*"
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_SKIP: "pp*"
          # Skip testing to speed up builds
          CIBW_TEST_SKIP: "*"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.arch }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels-windows:
    name: Build wheels (Windows)
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: "cp313-*"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_SKIP: "pp* *-win32"
          # Skip testing to speed up builds
          CIBW_TEST_SKIP: "*"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: wheelhouse/*.whl
          if-no-files-found: error

  sdist:
    name: Build sdist and test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install build backend and test dependencies
        run: |
          python -m pip install --upgrade build
          python -m pip install numpy>=2.1 pillow

      - name: Build sdist
        run: python -m build -s

      - name: Install package from sdist and test
        run: |
          python -m pip install dist/*.tar.gz
          python -c "import mvcrender; from mvcrender.autocrop import AutoCrop; print('Package import successful!')"
          python tests/smoke.py

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  publish:
    name: Publish to PyPI and GitHub Release (on GitHub Release)
    needs: [ wheels-linux, wheels-macos, wheels-windows, sdist ]
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect all distributions and create final tar.gz
        shell: bash
        run: |
          mkdir -p temp_dist dist

          # Extract version from sdist filename
          SDIST_FILE=$(ls artifacts/sdist/*.tar.gz)
          VERSION=$(basename "$SDIST_FILE" .tar.gz | sed 's/mvcrender-//')
          echo "Detected version: $VERSION"

          # Copy all wheels to temp directory
          find artifacts -name "*.whl" -exec cp {} temp_dist/ \;

          # Extract the original sdist to get source files
          cd temp_dist
          tar -xzf "../$SDIST_FILE"
          EXTRACTED_DIR=$(basename "$SDIST_FILE" .tar.gz)

          # Move source files to root of temp_dist
          mv "$EXTRACTED_DIR"/* .
          rmdir "$EXTRACTED_DIR"

          # Create final tar.gz with all wheels and source
          cd ..
          tar -czf "dist/mvcrender-${VERSION}.tar.gz" -C temp_dist .

          # Clean up temp directory
          rm -rf temp_dist

          echo "Final distribution created:"
          ls -lah dist/
          echo "âœ… Only mvcrender-${VERSION}.tar.gz will be published to PyPI"

      - name: Upload complete distribution to GitHub Release
        uses: softprops/action-gh-release@v2.3.3
        with:
          files: dist/mvcrender-*.tar.gz
          fail_on_unmatched_files: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish complete distribution to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.PYPY_PUB_KEY }}
          packages-dir: dist/
          print-hash: true
          verify-metadata: true
          
